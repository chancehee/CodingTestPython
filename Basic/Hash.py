'''
해쉬 구조란?
    -키(Key)와 값(Value)쌍으로 이루어진 데이터 구조를 의미합니다. Key를 이용하여 데이터를 찾으므로, 속도를 빠르게 만드는 구조입니다.
    -파이썬에서는 딕셔너리(Dictionary) 타입이 해쉬 테이블과 같은 구조입니다.
    -기본적으로는, 배열로 미리 Hash Table 크기만큼 생성해서 사용합니다. 공간은 많이 사용하지만, 시간은 빠르다는 장점이 있습니다.
    -검색이 많이 필요한 경우, 저장, 삭제, 읽기가 많은 경우, 캐쉬를 구현할 때 주로 사용됩니다.
    장점
        -데이터 저장/검색 속도가 빠릅니다.
        -해쉬는 키에 대한 데이터가 있는지(중복) 확인이 쉽습니다.
    단점
        -일반적으로 저장공간이 좀더 많이 필요합니다.
        -여러 키에 해당하는 주소가 동일할 경우 충돌을 해결하기 위한 별도 자료구조가 필요합니다. (충돌 해결 알고리즘)
    시간 복잡도
        -일반적인 경우(충돌이 없는 경우): O(1)
        -최악의 경우(모든 경우에 충돌이 발생하는 경우): O(n)
'''

import hashlib # SHA함수들을 가지고 있는 라이브러리
data = 'test'.encode()
hash_object = hashlib.sha1()
hash_object.update(data)
hex_dig = hash_object.hexdigest()
print(hex_dig)

# 파이썬의 딕셔너리 : Key, Value 구조
a = {} # 딕셔너리 생성
a[1] = 'a' # key가 1 이고 value가 'a'
a[2] = 'b'
a[3] = [1,2,3]

del a[2] # key가 2 인 요소 삭제

print(a.get(1))
print(a[1])

a.clear()
print(a)

# key 값이 중복되면, 가장 뒷쪽의 key,value쌍만을 가지고, 기존의 쌍은 무시합니다.

'''
충돌 해결 알고리즘
    1.Chaining 기법 
        - 해쉬테이블 저장공간 외에 공간을 더 추가해서 사용하는 방법
    2.Linear Probing 기법
        - 해쉬테이블 저장공간 안에서 충돌 문제를 해결하는 방법
        - 충돌이 일어나면, 해당 hash value의 다음 index 부터 맨 처음 나오는 빈 공간에 저장하는 기법(저장 공간 활용도의 증가)
    3.공간을 확장하는 방법
        - 2번에서 사용한 방식에서 공간을 늘린다면 1번에 비해 균형적인 구조로 사용이 가능하다.  
'''
